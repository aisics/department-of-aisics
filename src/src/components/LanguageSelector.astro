---
import { getLanguageFromCookie } from '../utils/i18n';

const lang = Astro.cookies.get('language')?.value || 'uk';
---

<div class="relative">
  <button 
    id="language-selector"
    class="group flex items-center space-x-2 p-3 bg-white/50 backdrop-blur-sm hover:bg-white/80 border border-white/20 hover:border-primary-200/50 rounded-2xl transition-all duration-300 hover:shadow-lg hover:scale-105"
    aria-label="Select language"
  >
    <svg class="w-4 h-4 text-gray-600 group-hover:text-primary-600 transition-colors duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129" />
    </svg>
    <span id="current-lang" class="text-sm font-semibold text-gray-700 group-hover:text-primary-700 transition-colors duration-300">{lang.toUpperCase()}</span>
    <svg class="w-3 h-3 transition-all duration-300 text-gray-500 group-hover:text-primary-600" id="chevron" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
    </svg>
  </button>
  
  <div 
    id="language-dropdown"
    class="fixed w-40 bg-white/95 backdrop-blur-xl border border-white/20 rounded-2xl shadow-lg hidden overflow-hidden"
    style="z-index: 99999; top: 4rem; right: 1rem;"
  >
    <button 
      class="w-full px-4 py-3 text-left text-sm font-medium text-gray-700 hover:bg-primary-50/80 hover:text-primary-700 transition-all duration-300 language-option flex items-center space-x-3"
      data-lang="uk"
    >
      <span class="text-lg">🇺🇦</span>
      <span>Українська</span>
    </button>
    <button 
      class="w-full px-4 py-3 text-left text-sm font-medium text-gray-700 hover:bg-primary-50/80 hover:text-primary-700 transition-all duration-300 language-option flex items-center space-x-3"
      data-lang="en"
    >
      <span class="text-lg">🇺🇸</span>
      <span>English</span>
    </button>
  </div>
</div>

<script>
  import { getCurrentLanguage } from '../utils/i18n';
  
  // Function to get corresponding slug in different language
  function getCorrespondingSlug(currentSlug, targetLang) {
    // Simple slug transformation based on the current pattern
    // basics-uk-vectors-in-ai <-> basics-en-vectors-in-ai
    if (currentSlug.includes('-uk-')) {
      return targetLang === 'en' ? currentSlug.replace('-uk-', '-en-') : currentSlug;
    } else if (currentSlug.includes('-en-')) {
      return targetLang === 'uk' ? currentSlug.replace('-en-', '-uk-') : currentSlug;
    }
    return currentSlug;
  }
  
  function setLanguage(lang) {
    if (typeof window !== 'undefined') {
      localStorage.setItem('language', lang);
      document.cookie = `language=${lang}; path=/;`;
      
      // Check if we're on an article page and need to redirect to corresponding article
      const currentPath = window.location.pathname;
      const articleMatch = currentPath.match(/^\/article\/(.+)$/);
      
      if (articleMatch) {
        const currentSlug = articleMatch[1];
        const correspondingSlug = getCorrespondingSlug(currentSlug, lang);
        
        if (correspondingSlug !== currentSlug) {
          // Redirect to corresponding article
          window.location.href = `/article/${correspondingSlug}`;
          return;
        }
      }
      
      // Just reload if not on article page or no corresponding article
      window.location.reload();
    }
  }
  
  document.addEventListener('DOMContentLoaded', () => {
    const selector = document.getElementById('language-selector');
    const dropdown = document.getElementById('language-dropdown');
    const chevron = document.getElementById('chevron');
    const currentLangSpan = document.getElementById('current-lang');
    const languageOptions = document.querySelectorAll('.language-option');
    
    // Set initial language display
    const currentLang = getCurrentLanguage();
    if (currentLangSpan) {
      currentLangSpan.textContent = currentLang.toUpperCase();
    }
    
    // Toggle dropdown
    selector?.addEventListener('click', (e) => {
      e.stopPropagation();
      
      if (dropdown?.classList.contains('hidden')) {
        // Position dropdown relative to button
        const rect = selector.getBoundingClientRect();
        dropdown.style.top = `${rect.bottom + 8}px`;
        dropdown.style.right = `${window.innerWidth - rect.right}px`;
        dropdown.classList.remove('hidden');
        chevron?.classList.add('rotate-180');
      } else {
        dropdown?.classList.add('hidden');
        chevron?.classList.remove('rotate-180');
      }
    });
    
    // Close dropdown when clicking outside
    document.addEventListener('click', () => {
      dropdown?.classList.add('hidden');
      chevron?.classList.remove('rotate-180');
    });
    
    // Handle language selection
    languageOptions.forEach(option => {
      option.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        // Get the lang from the button itself, not the clicked target
        const lang = option.getAttribute('data-lang');
        
        if (lang) {
          setLanguage(lang);
        }
      });
    });
  });
</script>
</div>