---
export interface Props {
  title?: string;
  type?: 'supervised' | 'unsupervised' | 'reinforcement';
  headers?: string[];
  data?: any[][];
  prediction?: {
    input: string;
    output: string;
  };
  clusters?: {
    name: string;
    description: string;
    members: string;
    color: 'blue' | 'green' | 'purple' | 'orange';
  }[];
}

const { 
  title = "üìä –ù–∞–≤—á–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ", 
  type = 'supervised',
  headers = [],
  data = [],
  prediction,
  clusters
} = Astro.props;

const colorMap = {
  '–ß–µ—Ä–≤–æ–Ω–∏–π': 'red',
  '–ñ–æ–≤—Ç–∏–π': 'yellow',
  '–û—Ä–∞–Ω–∂–µ–≤–∏–π': 'orange',
  '–ó–µ–ª–µ–Ω–∏–π': 'green',
  'Red': 'red',
  'Yellow': 'yellow',
  'Orange': 'orange',
  'Green': 'green'
};

function parseFeatures(features: string) {
  return features.split(',').map(f => {
    const trimmed = f.trim();
    const color = Object.keys(colorMap).find(c => trimmed.includes(c));
    return {
      text: trimmed,
      color: color ? colorMap[color as keyof typeof colorMap] : null
    };
  });
}
---

<div class="ml-data-grid-container">
  <h4 class="grid-title">{title}</h4>
  
  <div class="data-table">
    <div class="table-header">
      {headers.map(header => (
        <div class="header-cell">{header}</div>
      ))}
    </div>
    
    <div class="table-body">
      {data.map((row, i) => (
        <div class="table-row">
          {row.map((cell, j) => {
            if (type === 'supervised' && j === 0 && typeof cell === 'string') {
              const features = parseFeatures(cell);
              return (
                <div class="data-cell">
                  {features.map(feature => (
                    <span class={`feature-tag ${feature.color ? `color-${feature.color}` : ''}`}>
                      {feature.text}
                    </span>
                  ))}
                </div>
              );
            } else if (type === 'supervised' && j === 1) {
              return <div class="label-cell">{cell}</div>;
            } else {
              return <div class="data-cell">{cell}</div>;
            }
          })}
        </div>
      ))}
    </div>
  </div>
  
  {prediction && (
    <div class="prediction-box">
      <div class="prediction-input">
        <span class="prediction-label">–ù–æ–≤—ñ –¥–∞–Ω—ñ:</span>
        <div class="prediction-features">
          {parseFeatures(prediction.input).map(feature => (
            <span class={`feature-tag ${feature.color ? `color-${feature.color}` : ''}`}>
              {feature.text}
            </span>
          ))}
        </div>
      </div>
      <div class="prediction-arrow">‚Üí</div>
      <div class="prediction-output">
        <span class="prediction-label">–ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–¥–±–∞—á–∞—î:</span>
        <span class="prediction-result">{prediction.output}</span>
      </div>
    </div>
  )}
  
  {clusters && (
    <div class="clusters-container">
      <h4 class="grid-title">üîç –ê–ª–≥–æ—Ä–∏—Ç–º –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –≥—Ä—É–ø–∏:</h4>
      <div class="cluster-groups">
        {clusters.map(cluster => (
          <div class={`cluster-group cluster-${cluster.color}`}>
            <div class="cluster-badge">{cluster.name}</div>
            <div class="cluster-description">{cluster.description}</div>
            <div class="cluster-members">{cluster.members}</div>
          </div>
        ))}
      </div>
    </div>
  )}
</div>

<style>
  .ml-data-grid-container {
    margin: 2rem 0;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 3px;
    border-radius: 12px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
  }

  .ml-data-grid-container > * {
    background: white;
    padding: 1.5rem;
  }

  .ml-data-grid-container > *:first-child {
    border-radius: 10px 10px 0 0;
  }

  .ml-data-grid-container > *:last-child {
    border-radius: 0 0 10px 10px;
  }

  .ml-data-grid-container > *:only-child {
    border-radius: 10px;
  }

  .grid-title {
    margin: 0 0 1rem 0;
    color: #333;
    font-size: 1.1rem;
    font-weight: 600;
  }

  .data-table {
    overflow: hidden;
    border-radius: 8px;
    border: 1px solid #dee2e6;
  }

  .table-header {
    display: flex;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    font-weight: 600;
  }

  .header-cell {
    flex: 1;
    padding: 1rem;
    text-align: center;
    border-right: 1px solid rgba(255,255,255,0.2);
  }

  .header-cell:last-child {
    border-right: none;
  }

  .table-body {
    background: white;
  }

  .table-row {
    display: flex;
    border-bottom: 1px solid #dee2e6;
  }

  .table-row:last-child {
    border-bottom: none;
  }

  .table-row:nth-child(even) {
    background: #f8f9fa;
  }

  .table-row:hover {
    background: #e9ecef;
    transition: background 0.3s;
  }

  .data-cell, .label-cell {
    flex: 1;
    padding: 0.8rem;
    border-right: 1px solid #dee2e6;
  }

  .data-cell:last-child, .label-cell:last-child {
    border-right: none;
  }

  .label-cell {
    font-weight: 600;
    text-align: center;
    background: rgba(102, 126, 234, 0.05);
  }

  .feature-tag {
    display: inline-block;
    padding: 0.25rem 0.5rem;
    margin: 0.2rem;
    border-radius: 4px;
    background: #e9ecef;
    font-size: 0.9rem;
  }

  .feature-tag.color-red { 
    background: #ffe5e5; 
    color: #d32f2f; 
  }
  
  .feature-tag.color-yellow { 
    background: #fff3cd; 
    color: #f57c00; 
  }
  
  .feature-tag.color-orange { 
    background: #ffe0b2; 
    color: #e65100; 
  }
  
  .feature-tag.color-green { 
    background: #e8f5e9; 
    color: #2e7d32; 
  }

  .prediction-box {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.5rem;
    background: linear-gradient(90deg, #f8f9fa 0%, #e9ecef 100%);
    margin-top: 3px;
    border-radius: 0 0 10px 10px;
  }

  .prediction-input, .prediction-output {
    flex: 1;
  }

  .prediction-arrow {
    font-size: 2rem;
    color: #667eea;
    margin: 0 1rem;
  }

  .prediction-label {
    display: block;
    font-size: 0.9rem;
    color: #666;
    margin-bottom: 0.5rem;
  }

  .prediction-features {
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
  }

  .prediction-result {
    font-size: 1.2rem;
    font-weight: 600;
    color: #28a745;
  }

  .clusters-container {
    margin-top: 3px;
    padding: 1.5rem;
    background: white;
    border-radius: 0 0 10px 10px;
  }

  .cluster-groups {
    display: flex;
    gap: 1rem;
  }

  .cluster-group {
    flex: 1;
    padding: 1rem;
    border-radius: 8px;
    text-align: center;
    border: 2px solid;
  }

  .cluster-group.cluster-blue {
    background: linear-gradient(135deg, #667eea20 0%, #764ba220 100%);
    border-color: #667eea;
  }

  .cluster-group.cluster-green {
    background: linear-gradient(135deg, #28a74520 0%, #20c99720 100%);
    border-color: #28a745;
  }

  .cluster-group.cluster-purple {
    background: linear-gradient(135deg, #764ba220 0%, #667eea20 100%);
    border-color: #764ba2;
  }

  .cluster-group.cluster-orange {
    background: linear-gradient(135deg, #ff6b6b20 0%, #ffa50020 100%);
    border-color: #ff6b6b;
  }

  .cluster-badge {
    font-size: 1.2rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
  }

  .cluster-description {
    color: #666;
    margin-bottom: 0.5rem;
  }

  .cluster-members {
    font-size: 0.9rem;
    color: #999;
  }

  @media (max-width: 768px) {
    .cluster-groups {
      flex-direction: column;
    }

    .header-cell, .data-cell, .label-cell {
      padding: 0.5rem;
      font-size: 0.85rem;
    }

    .prediction-box {
      flex-direction: column;
      gap: 1rem;
    }

    .prediction-arrow {
      transform: rotate(90deg);
    }
  }
</style>