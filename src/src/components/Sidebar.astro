---
import { getTranslation } from '../utils/i18n';
import { getCollection } from 'astro:content';
import categoriesData from '../data/categories.json';

export interface Props {
  categories: { [key: string]: any[] };
  repoCategories?: Array<{ name: string; [key: string]: any }>;
  currentPath?: string;
  currentSlug?: string;
  currentCategory?: string;
}

const { categories, repoCategories = categoriesData.categories, currentPath = '', currentSlug = '', currentCategory = '' } = Astro.props;

// Get language from cookies or default to Ukrainian
const lang = Astro.cookies.get('language')?.value || 'uk';
const t = (key: string) => getTranslation(lang, key);

// Get articles for the sidebar from Content Collections
const allArticles = await getCollection('articles');
const articles = allArticles
  .filter(article => article.id.includes(`/${lang}/`) && !article.data.draft)
  .map(article => {
    // Use subcategory from frontmatter if available, otherwise extract from path
    let subcategory = article.data.subcategory || null;
    
    // Fallback to extracting from path if not in frontmatter
    if (!subcategory) {
      const pathParts = article.id.split('/');
      const categoryIndex = pathParts.findIndex(part => part === article.data.category || part === article.data.category.replace(' ', '-'));
      
      if (categoryIndex !== -1 && pathParts[categoryIndex + 1] && pathParts[categoryIndex + 1].match(/^\d{2}-/)) {
        subcategory = pathParts[categoryIndex + 1];
      }
    }
    
    return {
      ...article.data,
      subcategory,
      slug: `${article.data.category.toLowerCase().replace(' ', '-')}-${lang}-${article.slug.split('/').pop().replace('.md', '')}`,
      filePath: article.id
    };
  });

// Group articles by category and subcategory
const articlesByCategory = articles.reduce((acc, article) => {
  if (!acc[article.category]) {
    acc[article.category] = {};
  }
  
  const subcategoryKey = article.subcategory || '_root';
  if (!acc[article.category][subcategoryKey]) {
    acc[article.category][subcategoryKey] = [];
  }
  
  acc[article.category][subcategoryKey].push(article);
  return acc;
}, {} as Record<string, Record<string, any[]>>);

// Sort articles within each category and subcategory by filename
Object.keys(articlesByCategory).forEach(category => {
  Object.keys(articlesByCategory[category]).forEach(subcategory => {
    articlesByCategory[category][subcategory].sort((a, b) => {
      // Extract the number from the filename (e.g., "01-vectors-in-ai" -> "01")
      const getNumber = (article: any) => {
        const fileName = article.filePath.split('/').pop();
        const match = fileName.match(/^(\d+)-/);
        return match ? parseInt(match[1]) : 999;
      };
      return getNumber(a) - getNumber(b);
    });
  });
});

// Helper function to count total articles in a category
function countCategoryArticles(categoryPath: string): number {
  const categoryArticles = articlesByCategory[categoryPath];
  if (!categoryArticles) return 0;
  
  return Object.values(categoryArticles).reduce((sum, articles) => sum + articles.length, 0);
}

function getCategoryIcon(category: string, repoCategories: Array<{ name: string; icon?: string; [key: string]: any }>) {
  // Ensure repoCategories is always an array
  const safeRepoCategories = Array.isArray(repoCategories) ? repoCategories : [];
  
  // First try to find icon from repo metadata
  const repoCategory = safeRepoCategories.find(cat => cat.name.toLowerCase() === category.toLowerCase());
  if (repoCategory && repoCategory.icon) {
    return repoCategory.icon;
  }
  
  // Fallback to default icons
  const icons: { [key: string]: string } = {
    'basics': '📚',
    'machine-learning': '🤖',
    'deep-learning': '🧠',
    'nlp': '💬',
    'computer-vision': '👁️',
    'ethics': '⚖️',
    'applications': '🚀',
    'tutorials': '🎯',
    'research': '🔬',
    'tools': '🛠️'
  };
  return icons[category.toLowerCase()] || '📄';
}

function getCategoryDisplayName(category: any, currentLang: string, t: (key: string) => string) {
  // If it's a repo category object with name property
  if (typeof category === 'object' && category.name) {
    // Use the category name directly as the translation key
    const translation = t(category.name);
    
    // If translation exists and is different from the key, use it
    if (translation !== category.name) {
      return translation;
    }
    
    // Otherwise use the original name
    return category.name;
  }
  
  // If it's a string (fallback categories)
  if (typeof category === 'string') {
    const translation = t(category);
    
    if (translation !== category) {
      return translation;
    }
    
    return category.charAt(0).toUpperCase() + category.slice(1);
  }
  
  return 'Unknown Category';
}
---

<aside class="hidden lg:block w-72 bg-white border-r border-gray-200" id="desktop-sidebar">
  <div class="h-screen sticky top-0 overflow-y-auto">
    <!-- Header -->
    <div class="px-6 py-6 border-b border-gray-200">
      <h2 class="text-sm font-bold text-gray-900 uppercase tracking-wider">
        {t('nav.categories')}
      </h2>
      <p class="text-gray-500 text-sm mt-1 font-normal">{t('sidebar.chooseTopic')}</p>
    </div>
    
    <!-- Navigation -->
    <nav class="px-3 py-4">
      <div class="space-y-1">
        {repoCategories.map((category, index) => {
          const categoryArticles = articlesByCategory[category.path] || {};
          const totalArticles = countCategoryArticles(category.path);
          const isCurrentCategory = category.path === currentCategory;
          const hasSubcategories = category.subcategories && category.subcategories.length > 0;
          
          return (
            <div key={category.name}>
              <!-- Category Button -->
              <button 
                class={`group w-full flex items-center justify-between px-4 py-3 text-left rounded-lg transition-all duration-200 ${
                  isCurrentCategory 
                    ? 'bg-purple-50 text-purple-700 border-l-4 border-purple-600' 
                    : 'hover:bg-gray-50 text-gray-700 border-l-4 border-transparent'
                }`}
                onclick={`toggleCategory('${category.name}')`}
              >
                <div class="flex items-center space-x-3">
                  <!-- Icon -->
                  <span class="text-xl">{category.icon || getCategoryIcon(category.name, repoCategories)}</span>
                  
                  <!-- Text -->
                  <div>
                    <span class={`block text-sm font-semibold`}>
                      {getCategoryDisplayName(category, lang, t)}
                    </span>
                    {totalArticles > 0 && (
                      <span class={`text-xs ${
                        isCurrentCategory 
                          ? 'text-purple-600' 
                          : 'text-gray-500'
                      }`}>
                        {totalArticles} {totalArticles === 1 ? t('sidebar.article') : t('sidebar.articles')}
                      </span>
                    )}
                  </div>
                </div>
                
                <!-- Chevron -->
                <svg 
                  class={`w-4 h-4 transition-transform duration-200 ${
                    isCurrentCategory 
                      ? 'rotate-90 text-purple-600' 
                      : 'text-gray-400'
                  }`}
                  id={`chevron-${category.name}`}
                  fill="none" 
                  stroke="currentColor" 
                  viewBox="0 0 24 24"
                >
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </button>
              
              <!-- Category Content (Articles or Subcategories) -->
              <div id={`category-${category.name}`} class={`overflow-hidden transition-all duration-300 ${isCurrentCategory ? 'max-h-[1000px]' : 'max-h-0'}`}>
                <div class="ml-6 mt-1 space-y-1">
                  {hasSubcategories ? (
                    // Render subcategories (filter out empty ones)
                    category.subcategories.filter(subcategory => {
                      const subcategoryArticles = categoryArticles[subcategory.path] || [];
                      return subcategoryArticles.length > 0;
                    }).map((subcategory) => {
                      const subcategoryArticles = categoryArticles[subcategory.path] || [];
                      
                      // Check if any article in this subcategory is the current one
                      const isCurrentSubcategory = subcategoryArticles.some(article => article.slug === currentSlug);
                      
                      return (
                        <div key={subcategory.name}>
                          <!-- Subcategory Button -->
                          <button 
                            class={`group w-full flex items-center justify-between px-3 py-2 text-left rounded-md transition-all duration-200 ${
                              isCurrentSubcategory 
                                ? 'bg-purple-50 text-purple-700' 
                                : 'hover:bg-gray-50 text-gray-600'
                            }`}
                            onclick={`toggleSubcategory('${category.name}-${subcategory.name}')`}
                          >
                            <div class="flex items-center space-x-2">
                              <span class="text-sm">{subcategory.icon}</span>
                              <div class="flex-1">
                                <span class="text-sm font-medium">
                                  {t(subcategory.name)}
                                </span>
                                {subcategoryArticles.length > 0 && (
                                  <span class="text-xs text-gray-500 ml-1">
                                    ({subcategoryArticles.length})
                                  </span>
                                )}
                              </div>
                            </div>
                            
                            <svg 
                              class={`w-3 h-3 transition-transform duration-200 ${
                                isCurrentSubcategory 
                                  ? 'rotate-90 text-purple-600' 
                                  : 'text-gray-400'
                              }`}
                              id={`chevron-${category.name}-${subcategory.name}`}
                              fill="none" 
                              stroke="currentColor" 
                              viewBox="0 0 24 24"
                            >
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                            </svg>
                          </button>
                          
                          <!-- Subcategory Articles -->
                          <div id={`subcategory-${category.name}-${subcategory.name}`} class={`overflow-hidden transition-all duration-300 ${isCurrentSubcategory ? 'max-h-[600px]' : 'max-h-0'}`}>
                            <div class="ml-4 mt-1 space-y-1">
                              {subcategoryArticles.length > 0 ? (
                                subcategoryArticles.map((article) => {
                                  const isCurrentArticle = article.slug === currentSlug;
                                  return (
                                    <a 
                                      href={`/article/${article.slug}`}
                                      class={`group block px-3 py-2 rounded-md transition-all duration-200 ${
                                        isCurrentArticle 
                                          ? 'bg-purple-50 text-purple-700' 
                                          : 'hover:bg-gray-50 text-gray-600'
                                      }`}
                                    >
                                      <div class="flex items-center space-x-2">
                                        <!-- Article Info -->
                                        <div class="flex-1 min-w-0">
                                          <h4 class={`text-sm font-medium truncate leading-tight`}>
                                            {article.title}
                                          </h4>
                                          
                                          <!-- Article Meta -->
                                          <div class="flex items-center space-x-2 text-xs mt-0.5">
                                            <span class={`${
                                              isCurrentArticle 
                                                ? 'text-purple-600' 
                                                : 'text-gray-500'
                                            }`}>
                                              {article.readingTime} {lang === 'uk' ? 'хв' : 'min'}
                                            </span>
                                            {article.difficulty && (
                                              <span class={`px-1.5 py-0.5 rounded text-xs font-medium ${
                                                article.difficulty === 'beginner' ? 'bg-green-100 text-green-700' :
                                                article.difficulty === 'intermediate' ? 'bg-yellow-100 text-yellow-700' :
                                                'bg-red-100 text-red-700'
                                              }`}>
                                                {article.difficulty === 'beginner' ? (lang === 'uk' ? 'Початківець' : 'Beginner') :
                                                 article.difficulty === 'intermediate' ? (lang === 'uk' ? 'Середній' : 'Intermediate') :
                                                 (lang === 'uk' ? 'Просунутий' : 'Advanced')}
                                              </span>
                                            )}
                                          </div>
                                        </div>
                                      </div>
                                    </a>
                                  );
                                })
                              ) : (
                                <div class="px-4 py-4 text-center">
                                  <p class="text-sm text-gray-500">{t('sidebar.empty')}</p>
                                </div>
                              )}
                            </div>
                          </div>
                        </div>
                      );
                    })
                  ) : (
                    // Render articles directly if no subcategories
                    categoryArticles._root && categoryArticles._root.length > 0 ? (
                      categoryArticles._root.map((article) => {
                        const isCurrentArticle = article.slug === currentSlug;
                        return (
                          <a 
                            href={`/article/${article.slug}`}
                            class={`group block px-3 py-2 rounded-md transition-all duration-200 ${
                              isCurrentArticle 
                                ? 'bg-purple-50 text-purple-700' 
                                : 'hover:bg-gray-50 text-gray-600'
                            }`}
                          >
                            <div class="flex items-center space-x-2">
                              <!-- Article Info -->
                              <div class="flex-1 min-w-0">
                                <h4 class={`text-sm font-medium truncate leading-tight`}>
                                  {article.title}
                                </h4>
                                
                                <!-- Article Meta -->
                                <div class="flex items-center space-x-2 text-xs mt-0.5">
                                  <span class={`${
                                    isCurrentArticle 
                                      ? 'text-purple-600' 
                                      : 'text-gray-500'
                                  }`}>
                                    {article.readingTime} {lang === 'uk' ? 'хв' : 'min'}
                                  </span>
                                  {article.difficulty && (
                                    <span class={`px-1.5 py-0.5 rounded text-xs font-medium ${
                                      article.difficulty === 'beginner' ? 'bg-green-100 text-green-700' :
                                      article.difficulty === 'intermediate' ? 'bg-yellow-100 text-yellow-700' :
                                      'bg-red-100 text-red-700'
                                    }`}>
                                      {article.difficulty === 'beginner' ? (lang === 'uk' ? 'Початківець' : 'Beginner') :
                                       article.difficulty === 'intermediate' ? (lang === 'uk' ? 'Середній' : 'Intermediate') :
                                       (lang === 'uk' ? 'Просунутий' : 'Advanced')}
                                    </span>
                                  )}
                                </div>
                              </div>
                            </div>
                          </a>
                        );
                      })
                    ) : (
                      <div class="px-4 py-4 text-center">
                        <p class="text-sm text-gray-500">{t('sidebar.empty')}</p>
                        <p class="text-xs text-gray-400 mt-1">{t('popup.sorry.message')}</p>
                      </div>
                    )
                  )}
                </div>
              </div>
            </div>
          );
        })}
      </div>
    </nav>
  </div>
</aside>

<!-- Mobile sidebar (hidden on desktop) -->
<aside class="lg:hidden fixed inset-y-0 left-0 z-40 w-72 bg-white border-r border-gray-200 transform -translate-x-full transition-transform duration-300" id="mobile-sidebar">
  <!-- Same content as desktop sidebar -->
  <div class="h-full overflow-y-auto">
    <!-- Header with close button -->
    <div class="px-6 py-6 border-b border-gray-200 flex items-center justify-between">
      <div>
        <h2 class="text-sm font-bold text-gray-900 uppercase tracking-wider">
          {t('nav.categories')}
        </h2>
        <p class="text-gray-500 text-sm mt-1 font-normal">{t('sidebar.chooseTopic')}</p>
      </div>
      <button onclick="closeMobileSidebar()" class="text-gray-500 hover:text-gray-700">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    
    <!-- Same navigation content as desktop -->
    <nav class="px-3 py-4">
      <!-- Copy the same content from desktop navigation here -->
    </nav>
  </div>
</aside>

<script is:inline>
  window.toggleCategory = function(categoryName) {
    const content = document.getElementById(`category-${categoryName}`);
    const chevron = document.getElementById(`chevron-${categoryName}`);
    
    if (content && chevron) {
      // Check if currently expanded by looking for the expanded class
      const isExpanded = content.classList.contains('max-h-[1000px]');
      
      if (isExpanded) {
        // Collapse
        content.classList.remove('max-h-[1000px]');
        content.classList.add('max-h-0');
        chevron.classList.remove('rotate-90');
      } else {
        // Expand
        content.classList.remove('max-h-0');
        content.classList.add('max-h-[1000px]');
        chevron.classList.add('rotate-90');
      }
    }
  }
  
  window.toggleSubcategory = function(subcategoryName) {
    const content = document.getElementById(`subcategory-${subcategoryName}`);
    const chevron = document.getElementById(`chevron-${subcategoryName}`);
    
    if (content && chevron) {
      // Check if currently expanded by looking for the expanded class
      const isExpanded = content.classList.contains('max-h-[600px]');
      
      if (isExpanded) {
        // Collapse
        content.classList.remove('max-h-[600px]');
        content.classList.add('max-h-0');
        chevron.classList.remove('rotate-90');
      } else {
        // Expand
        content.classList.remove('max-h-0');
        content.classList.add('max-h-[600px]');
        chevron.classList.add('rotate-90');
      }
    }
  }

  window.closeMobileSidebar = function() {
    const sidebar = document.getElementById('mobile-sidebar');
    if (sidebar) {
      sidebar.classList.add('-translate-x-full');
    }
  }

  window.handleCategoryClick = function(categoryName) {
    console.log('Category clicked:', categoryName);
  }
</script>