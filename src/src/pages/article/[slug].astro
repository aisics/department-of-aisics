---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import { getSampleArticles } from '../../utils/github';
import { marked } from 'marked';

export async function getStaticPaths() {
  const articles = getSampleArticles();
  
  return articles.map(article => ({
    params: { slug: article.slug },
    props: { article }
  }));
}

const { article } = Astro.props;

// Configure marked for better rendering
marked.setOptions({
  breaks: true,
  gfm: true,
  headerIds: true,
  mangle: false
});

// Sample markdown content for demonstration
const sampleContent = `
# ${article.title}

${article.description}

## Introduction

This is a comprehensive guide to understanding the fundamentals and applications of this topic. We'll explore key concepts, provide practical examples, and discuss real-world applications.

## Key Concepts

### Concept 1: Foundation
Understanding the basic principles is crucial for building a solid foundation in this area. Here are the essential elements:

- **Definition**: Clear explanation of what this concept means
- **Applications**: Where and how it's used in practice
- **Benefits**: Why this approach is valuable

### Concept 2: Implementation
Moving from theory to practice requires understanding implementation details:

\`\`\`python
# Sample code example
def example_function():
    """
    This is a sample function demonstrating key concepts.
    """
    return "Hello, AI World!"

result = example_function()
print(result)
\`\`\`

## Practical Applications

### Real-World Use Cases

1. **Industry Application 1**: How this technology is transforming specific industries
2. **Research Applications**: Current research directions and breakthrough discoveries
3. **Future Possibilities**: Emerging trends and potential developments

### Best Practices

- Always validate your data before processing
- Consider ethical implications in your implementations
- Stay updated with the latest research and developments
- Test thoroughly before deployment

## Conclusion

This field continues to evolve rapidly, offering exciting opportunities for innovation and practical applications. The key to success is continuous learning and hands-on practice.

## Further Reading

- [Related Article 1](#)
- [Research Paper Reference](#)
- [Official Documentation](#)
`;

// Convert markdown to HTML
const htmlContent = marked(sampleContent);
---

<Layout title={`${article.title} - AI Education Portal`} description={article.description}>
  <Header />
  
  <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Breadcrumb -->
    <nav class="mb-8">
      <ol class="flex items-center space-x-2 text-sm text-gray-500">
        <li><a href="/" class="hover:text-primary-600">Home</a></li>
        <li><span>/</span></li>
        <li><span class="text-gray-900">{article.category}</span></li>
        <li><span>/</span></li>
        <li><span class="text-gray-900 truncate">{article.title}</span></li>
      </ol>
    </nav>

    <!-- Article Header -->
    <header class="mb-8 pb-8 border-b border-gray-200">
      <div class="mb-4">
        <span class="inline-block px-3 py-1 text-sm font-medium bg-primary-50 text-primary-700 rounded-full">
          {article.category}
        </span>
      </div>
      
      <h1 class="text-4xl font-bold text-gray-950 mb-4 leading-tight">
        {article.title}
      </h1>
      
      <p class="text-xl text-gray-600 mb-6 leading-relaxed">
        {article.description}
      </p>
      
      <div class="flex items-center justify-between flex-wrap gap-4">
        <div class="flex items-center space-x-4 text-sm text-gray-500">
          <div class="flex items-center">
            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            {article.readingTime} min read
          </div>
          <div class="flex items-center">
            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            {new Date(article.lastModified).toLocaleDateString()}
          </div>
        </div>
        
        <div class="flex items-center space-x-2">
          <button class="p-2 text-gray-400 hover:text-primary-600 transition-colors" title="Bookmark">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z" />
            </svg>
          </button>
          <button class="p-2 text-gray-400 hover:text-primary-600 transition-colors" title="Share">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
            </svg>
          </button>
        </div>
      </div>
      
      {article.tags.length > 0 && (
        <div class="mt-6 flex flex-wrap gap-2">
          {article.tags.map(tag => (
            <span key={tag} class="inline-block px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded-full">
              #{tag}
            </span>
          ))}
        </div>
      )}
    </header>

    <!-- Article Content -->
    <article class="prose prose-lg max-w-none">
      <div set:html={htmlContent} />
    </article>

    <!-- Article Footer -->
    <footer class="mt-12 pt-8 border-t border-gray-200">
      <div class="flex items-center justify-between">
        <div class="text-sm text-gray-500">
          Was this article helpful?
        </div>
        <div class="flex items-center space-x-4">
          <button class="flex items-center px-4 py-2 text-sm text-gray-600 hover:text-primary-600 transition-colors">
            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V5a2 2 0 00-2-2h-.095c-.5 0-.905.405-.905.905 0 .714-.211 1.412-.608 2.006L7 11v9m7-10h-2M7 20H5a2 2 0 01-2-2v-6a2 2 0 012-2h2.5" />
            </svg>
            Helpful
          </button>
          <button class="flex items-center px-4 py-2 text-sm text-gray-600 hover:text-red-600 transition-colors">
            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14H5.236a2 2 0 01-1.789-2.894l3.5-7A2 2 0 018.737 3h4.018c.163 0 .326.02.485.06L17 4m-7 10v2a2 2 0 002 2h.095c.5 0 .905-.405.905-.905 0-.714.211-1.412.608-2.006L17 13V4m-7 10h2m5-10h2a2 2 0 012 2v6a2 2 0 01-2 2h-2.5" />
            </svg>
            Not helpful
          </button>
        </div>
      </div>
    </footer>
  </div>
</Layout>

<script>
  // Add smooth scrolling for internal links
  document.addEventListener('DOMContentLoaded', () => {
    const links = document.querySelectorAll('a[href^="#"]');
    links.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href')?.substring(1);
        const targetElement = targetId ? document.getElementById(targetId) : null;
        if (targetElement) {
          targetElement.scrollIntoView({ behavior: 'smooth' });
        }
      });
    });
  });
</script>