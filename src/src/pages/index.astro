---
import { loadTranslations, getLanguageFromCookie } from '../utils/i18n';
await loadTranslations();
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Sidebar from '../components/Sidebar.astro';
import ArticleList from '../components/ArticleList.astro';
import { getCategories } from '../utils/articles';
import { getCollection } from 'astro:content';
import { getTranslation } from '../utils/i18n';

const lang = Astro.cookies.get('language')?.value || 'uk';
// Get categories from metadata.json
const categoriesFromRepo = getCategories();
// Get articles for current language from content collections
const allArticles = await getCollection('articles');
const articles = allArticles
  .filter(article => article.id.includes(`/${lang}/`) && !article.data.draft)
  .map(article => ({
    ...article.data,
    slug: `${article.data.category.toLowerCase()}-${lang}-${article.slug.split('/').pop().replace('.md', '')}`,
    filePath: article.id
  }));

const t = (key: string) => getTranslation(lang, key);
---

<Layout title={`${t('site.title')} - ${t('hero.title')}`}>
  <Header />
  
  <div class="lg:flex min-h-screen">
    <Sidebar 
      categories={{}} 
      repoCategories={categoriesFromRepo} 
    />
    
    <main class="lg:flex-1 relative overflow-hidden">
      <!-- Modern Hero Section -->
      <section class="relative min-h-screen flex items-center justify-center overflow-hidden bg-gradient-to-br from-neural-950 via-primary-900 to-secondary-900">
        <!-- Animated Background -->
        <div class="absolute inset-0 bg-neural-pattern opacity-30"></div>
        
        <!-- Floating Elements -->
        <div class="absolute top-20 left-20 w-72 h-72 bg-gradient-to-r from-primary-500/20 to-secondary-500/20 rounded-full blur-3xl animate-float"></div>
        <div class="absolute bottom-20 right-20 w-96 h-96 bg-gradient-to-r from-secondary-500/20 to-accent-500/20 rounded-full blur-3xl animate-float" style="animation-delay: -2s;"></div>
        <div class="absolute top-1/2 left-1/3 w-48 h-48 bg-gradient-to-r from-accent-500/20 to-primary-500/20 rounded-full blur-2xl animate-pulse-slow"></div>
        
        <!-- Grid Pattern Overlay -->
        <div class="absolute inset-0 bg-gradient-to-b from-transparent via-neural-900/5 to-neural-900/20"></div>
        
        <!-- Content -->
        <div class="relative z-10 text-center px-4 sm:px-6 max-w-6xl mx-auto">
          <!-- Main Title -->
          <h1 class="text-4xl sm:text-5xl md:text-6xl lg:text-8xl xl:text-9xl font-black mb-8 leading-tight animate-fade-in-up">
            <span class="block bg-gradient-to-r from-white via-primary-100 to-secondary-100 bg-clip-text text-transparent">
              {t('hero.title')}
            </span>
          </h1>
          
          <!-- Subtitle -->
          <p class="text-lg sm:text-xl md:text-2xl lg:text-3xl text-neural-300 max-w-4xl mx-auto leading-relaxed mb-12 animate-fade-in-up font-light" style="animation-delay: 0.2s;">
            {t('hero.description')}
          </p>
          
          <!-- CTA Buttons -->
          <div class="flex flex-col sm:flex-row gap-6 justify-center items-center animate-fade-in-up" style="animation-delay: 0.4s;">
            <a 
              href="#explore" 
              class="group relative px-8 py-4 bg-gradient-to-r from-primary-500 to-secondary-500 text-white font-semibold rounded-2xl overflow-hidden transition-all duration-500 hover:shadow-glow-lg hover:scale-105 transform"
            >
              <div class="absolute inset-0 bg-gradient-to-r from-primary-600 to-secondary-600 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <div class="relative flex items-center space-x-2">
                <span>{t('cta.startLearning')}</span>
                <svg class="w-5 h-5 transform group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
                </svg>
              </div>
            </a>
          </div>
      </section>

      <!-- Articles Section -->
      <section id="explore" class="relative py-20 bg-gradient-to-b from-neural-50 to-white">
        <!-- Section Header -->
        <div class="max-w-7xl mx-auto px-4 sm:px-6 mb-16 text-center">
          <h2 class="text-3xl sm:text-4xl md:text-5xl font-bold text-neural-900 mb-6 animate-fade-in-up">
            Досліджуйте знання
          </h2>
          <p class="text-lg sm:text-xl text-neural-600 max-w-3xl mx-auto animate-fade-in-up" style="animation-delay: 0.1s;">
            Оберіть тему, яка вас цікавить, та почніть свій шлях у світ штучного інтелекту
          </p>
        </div>
        
        <!-- Articles Grid -->
        <div class="animate-fade-in-up" style="animation-delay: 0.2s;">
          <ArticleList articles={articles} lang={lang} />
        </div>
        
        <!-- Background Elements -->
        <div class="absolute top-10 right-10 w-32 h-32 bg-gradient-to-br from-primary-200 to-secondary-200 rounded-full blur-2xl opacity-60"></div>
        <div class="absolute bottom-10 left-10 w-24 h-24 bg-gradient-to-br from-secondary-200 to-accent-200 rounded-full blur-xl opacity-60"></div>
      </section>
    </main>
  </div>

</Layout>

<style>
  /* Additional custom animations */
  @keyframes float {
    0%, 100% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-20px);
    }
  }
  
  /* Scroll behavior */
  html {
    scroll-behavior: smooth;
  }
  
  /* Custom gradient animation */
  .animate-gradient {
    background-size: 400% 400%;
    animation: gradient 8s ease infinite;
  }
</style>

<script>
  // Add intersection observer for scroll animations
  if (typeof window !== 'undefined') {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-fade-in-up');
        }
      });
    }, observerOptions);

    // Observe elements when page loads
    document.addEventListener('DOMContentLoaded', () => {
      const elementsToAnimate = document.querySelectorAll('.animate-on-scroll');
      elementsToAnimate.forEach(el => observer.observe(el));
    });
  }
</script>